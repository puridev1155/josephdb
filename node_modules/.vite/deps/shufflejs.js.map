{
  "version": 3,
  "sources": ["../../tiny-emitter/index.js", "../../array-parallel/index.js", "../../shufflejs/src/get-number.js", "../../shufflejs/src/point.js", "../../shufflejs/src/rect.js", "../../shufflejs/src/classes.js", "../../shufflejs/src/shuffle-item.js", "../../shufflejs/src/computed-size.js", "../../shufflejs/src/get-number-style.js", "../../shufflejs/src/sorter.js", "../../shufflejs/src/on-transition-end.js", "../../shufflejs/src/array-max.js", "../../shufflejs/src/array-min.js", "../../shufflejs/src/layout.js", "../../shufflejs/src/hyphenate.js", "../../shufflejs/src/shuffle.js"],
  "sourcesContent": ["function E () {\n  // Keep this empty so it's easier to inherit from\n  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n}\n\nE.prototype = {\n  on: function (name, callback, ctx) {\n    var e = this.e || (this.e = {});\n\n    (e[name] || (e[name] = [])).push({\n      fn: callback,\n      ctx: ctx\n    });\n\n    return this;\n  },\n\n  once: function (name, callback, ctx) {\n    var self = this;\n    function listener () {\n      self.off(name, listener);\n      callback.apply(ctx, arguments);\n    };\n\n    listener._ = callback\n    return this.on(name, listener, ctx);\n  },\n\n  emit: function (name) {\n    var data = [].slice.call(arguments, 1);\n    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n    var i = 0;\n    var len = evtArr.length;\n\n    for (i; i < len; i++) {\n      evtArr[i].fn.apply(evtArr[i].ctx, data);\n    }\n\n    return this;\n  },\n\n  off: function (name, callback) {\n    var e = this.e || (this.e = {});\n    var evts = e[name];\n    var liveEvents = [];\n\n    if (evts && callback) {\n      for (var i = 0, len = evts.length; i < len; i++) {\n        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\n          liveEvents.push(evts[i]);\n      }\n    }\n\n    // Remove event from queue to prevent memory leak\n    // Suggested by https://github.com/lazd\n    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n    (liveEvents.length)\n      ? e[name] = liveEvents\n      : delete e[name];\n\n    return this;\n  }\n};\n\nmodule.exports = E;\nmodule.exports.TinyEmitter = E;\n", "module.exports = function parallel(fns, context, callback) {\n  if (!callback) {\n    if (typeof context === 'function') {\n      callback = context\n      context = null\n    } else {\n      callback = noop\n    }\n  }\n\n  var pending = fns && fns.length\n  if (!pending) return callback(null, []);\n\n  var finished = false\n  var results = new Array(pending)\n\n  fns.forEach(context ? function (fn, i) {\n    fn.call(context, maybeDone(i))\n  } : function (fn, i) {\n    fn(maybeDone(i))\n  })\n\n  function maybeDone(i) {\n    return function (err, result) {\n      if (finished) return;\n\n      if (err) {\n        callback(err, results)\n        finished = true\n        return\n      }\n\n      results[i] = result\n\n      if (!--pending) callback(null, results);\n    }\n  }\n}\n\nfunction noop() {}\n", "/**\n * Always returns a numeric value, given a value. Logic from jQuery's `isNumeric`.\n * @param {*} value Possibly numeric value.\n * @return {number} `value` or zero if `value` isn't numeric.\n */\nexport default function getNumber(value) {\n  return parseFloat(value) || 0;\n}\n", "import getNumber from './get-number';\n\nclass Point {\n  /**\n   * Represents a coordinate pair.\n   * @param {number} [x=0] X.\n   * @param {number} [y=0] Y.\n   */\n  constructor(x, y) {\n    this.x = getNumber(x);\n    this.y = getNumber(y);\n  }\n\n  /**\n   * Whether two points are equal.\n   * @param {Point} a Point A.\n   * @param {Point} b Point B.\n   * @return {boolean}\n   */\n  static equals(a, b) {\n    return a.x === b.x && a.y === b.y;\n  }\n}\n\nexport default Point;\n", "export default class Rect {\n  /**\n   * Class for representing rectangular regions.\n   * https://github.com/google/closure-library/blob/master/closure/goog/math/rect.js\n   * @param {number} x Left.\n   * @param {number} y Top.\n   * @param {number} w Width.\n   * @param {number} h Height.\n   * @param {number} id Identifier\n   * @constructor\n   */\n  constructor(x, y, w, h, id) {\n    this.id = id;\n\n    /** @type {number} */\n    this.left = x;\n\n    /** @type {number} */\n    this.top = y;\n\n    /** @type {number} */\n    this.width = w;\n\n    /** @type {number} */\n    this.height = h;\n  }\n\n  /**\n   * Returns whether two rectangles intersect.\n   * @param {Rect} a A Rectangle.\n   * @param {Rect} b A Rectangle.\n   * @return {boolean} Whether a and b intersect.\n   */\n  static intersects(a, b) {\n    return (\n      a.left < b.left + b.width && b.left < a.left + a.width && a.top < b.top + b.height && b.top < a.top + a.height\n    );\n  }\n}\n", "export default {\n  BASE: 'shuffle',\n  SHUFFLE_ITEM: 'shuffle-item',\n  VISIBLE: 'shuffle-item--visible',\n  HIDDEN: 'shuffle-item--hidden',\n};\n", "import Point from './point';\nimport Classes from './classes';\n\nlet id = 0;\n\nclass ShuffleItem {\n  constructor(element, isRTL) {\n    id += 1;\n    this.id = id;\n    this.element = element;\n\n    /**\n     * Set correct direction of item\n     */\n    this.isRTL = isRTL;\n\n    /**\n     * Used to separate items for layout and shrink.\n     */\n    this.isVisible = true;\n\n    /**\n     * Used to determine if a transition will happen. By the time the _layout\n     * and _shrink methods get the ShuffleItem instances, the `isVisible` value\n     * has already been changed by the separation methods, so this property is\n     * needed to know if the item was visible/hidden before the shrink/layout.\n     */\n    this.isHidden = false;\n  }\n\n  show() {\n    this.isVisible = true;\n    this.element.classList.remove(Classes.HIDDEN);\n    this.element.classList.add(Classes.VISIBLE);\n    this.element.removeAttribute('aria-hidden');\n  }\n\n  hide() {\n    this.isVisible = false;\n    this.element.classList.remove(Classes.VISIBLE);\n    this.element.classList.add(Classes.HIDDEN);\n    this.element.setAttribute('aria-hidden', true);\n  }\n\n  init() {\n    this.addClasses([Classes.SHUFFLE_ITEM, Classes.VISIBLE]);\n    this.applyCss(ShuffleItem.Css.INITIAL);\n    this.applyCss(this.isRTL ? ShuffleItem.Css.DIRECTION.rtl : ShuffleItem.Css.DIRECTION.ltr);\n    this.scale = ShuffleItem.Scale.VISIBLE;\n    this.point = new Point();\n  }\n\n  addClasses(classes) {\n    classes.forEach((className) => {\n      this.element.classList.add(className);\n    });\n  }\n\n  removeClasses(classes) {\n    classes.forEach((className) => {\n      this.element.classList.remove(className);\n    });\n  }\n\n  applyCss(obj) {\n    Object.keys(obj).forEach((key) => {\n      this.element.style[key] = obj[key];\n    });\n  }\n\n  dispose() {\n    this.removeClasses([Classes.HIDDEN, Classes.VISIBLE, Classes.SHUFFLE_ITEM]);\n\n    this.element.removeAttribute('style');\n    this.element = null;\n  }\n}\n\nShuffleItem.Css = {\n  INITIAL: {\n    position: 'absolute',\n    top: 0,\n    visibility: 'visible',\n    willChange: 'transform',\n  },\n  DIRECTION: {\n    ltr: {\n      left: 0,\n    },\n    rtl: {\n      right: 0,\n    },\n  },\n  VISIBLE: {\n    before: {\n      opacity: 1,\n      visibility: 'visible',\n    },\n    after: {\n      transitionDelay: '',\n    },\n  },\n  HIDDEN: {\n    before: {\n      opacity: 0,\n    },\n    after: {\n      visibility: 'hidden',\n      transitionDelay: '',\n    },\n  },\n};\n\nShuffleItem.Scale = {\n  VISIBLE: 1,\n  HIDDEN: 0.001,\n};\n\nexport default ShuffleItem;\n", "import getNumber from './get-number';\n\nlet value = null;\nexport default () => {\n  if (value !== null) {\n    return value;\n  }\n\n  const element = document.body || document.documentElement;\n  const e = document.createElement('div');\n  e.style.cssText = 'width:10px;padding:2px;box-sizing:border-box;';\n  element.appendChild(e);\n\n  const { width } = window.getComputedStyle(e, null);\n  // Fix for issue #314\n  value = Math.round(getNumber(width)) === 10;\n\n  element.removeChild(e);\n\n  return value;\n};\n", "import getNumber from './get-number';\nimport testComputedSize from './computed-size';\n\n/**\n * Retrieve the computed style for an element, parsed as a float.\n * @param {Element} element Element to get style for.\n * @param {string} style Style property.\n * @param {CSSStyleDeclaration} [styles] Optionally include clean styles to\n *     use instead of asking for them again.\n * @return {number} The parsed computed value or zero if that fails because IE\n *     will return 'auto' when the element doesn't have margins instead of\n *     the computed style.\n */\nexport default function getNumberStyle(element, style, styles = window.getComputedStyle(element, null)) {\n  let value = getNumber(styles[style]);\n\n  // Support IE<=11 and W3C spec.\n  if (!testComputedSize() && style === 'width') {\n    value +=\n      getNumber(styles.paddingLeft) +\n      getNumber(styles.paddingRight) +\n      getNumber(styles.borderLeftWidth) +\n      getNumber(styles.borderRightWidth);\n  } else if (!testComputedSize() && style === 'height') {\n    value +=\n      getNumber(styles.paddingTop) +\n      getNumber(styles.paddingBottom) +\n      getNumber(styles.borderTopWidth) +\n      getNumber(styles.borderBottomWidth);\n  }\n\n  return value;\n}\n", "/**\n * Fisher-Yates shuffle.\n * http://stackoverflow.com/a/962890/373422\n * https://bost.ocks.org/mike/shuffle/\n * @param {Array} array Array to shuffle.\n * @return {Array} Randomly sorted array.\n */\nfunction randomize(array) {\n  let n = array.length;\n\n  while (n) {\n    n -= 1;\n    const i = Math.floor(Math.random() * (n + 1));\n    const temp = array[i];\n    array[i] = array[n];\n    array[n] = temp;\n  }\n\n  return array;\n}\n\nconst defaults = {\n  // Use array.reverse() to reverse the results\n  reverse: false,\n\n  // Sorting function\n  by: null,\n\n  // Custom sort function\n  compare: null,\n\n  // If true, this will skip the sorting and return a randomized order in the array\n  randomize: false,\n\n  // Determines which property of each item in the array is passed to the\n  // sorting method.\n  key: 'element',\n};\n\n/**\n * You can return `undefined` from the `by` function to revert to DOM order.\n * @param {Array<T>} arr Array to sort.\n * @param {SortOptions} options Sorting options.\n * @return {Array<T>}\n */\nexport default function sorter(arr, options) {\n  const opts = { ...defaults, ...options };\n  const original = Array.from(arr);\n  let revert = false;\n\n  if (!arr.length) {\n    return [];\n  }\n\n  if (opts.randomize) {\n    return randomize(arr);\n  }\n\n  // Sort the elements by the opts.by function.\n  // If we don't have opts.by, default to DOM order\n  if (typeof opts.by === 'function') {\n    arr.sort((a, b) => {\n      // Exit early if we already know we want to revert\n      if (revert) {\n        return 0;\n      }\n\n      const valA = opts.by(a[opts.key]);\n      const valB = opts.by(b[opts.key]);\n\n      // If both values are undefined, use the DOM order\n      if (valA === undefined && valB === undefined) {\n        revert = true;\n        return 0;\n      }\n\n      if (valA < valB || valA === 'sortFirst' || valB === 'sortLast') {\n        return -1;\n      }\n\n      if (valA > valB || valA === 'sortLast' || valB === 'sortFirst') {\n        return 1;\n      }\n\n      return 0;\n    });\n  } else if (typeof opts.compare === 'function') {\n    arr.sort(opts.compare);\n  }\n\n  // Revert to the original array if necessary\n  if (revert) {\n    return original;\n  }\n\n  if (opts.reverse) {\n    arr.reverse();\n  }\n\n  return arr;\n}\n", "const transitions = {};\nconst eventName = 'transitionend';\nlet count = 0;\n\nfunction uniqueId() {\n  count += 1;\n  return eventName + count;\n}\n\nexport function cancelTransitionEnd(id) {\n  if (transitions[id]) {\n    transitions[id].element.removeEventListener(eventName, transitions[id].listener);\n    transitions[id] = null;\n    return true;\n  }\n\n  return false;\n}\n\nexport function onTransitionEnd(element, callback) {\n  const id = uniqueId();\n  const listener = (evt) => {\n    if (evt.currentTarget === evt.target) {\n      cancelTransitionEnd(id);\n      callback(evt);\n    }\n  };\n\n  element.addEventListener(eventName, listener);\n\n  transitions[id] = { element, listener };\n\n  return id;\n}\n", "export default function arrayMax(array) {\n  return Math.max(...array);\n}\n", "export default function arrayMin(array) {\n  return Math.min(...array);\n}\n", "import Point from './point';\nimport Rect from './rect';\nimport arrayMax from './array-max';\nimport arrayMin from './array-min';\n\n/**\n * Determine the number of columns an items spans.\n * @param {number} itemWidth Width of the item.\n * @param {number} columnWidth Width of the column (includes gutter).\n * @param {number} columns Total number of columns\n * @param {number} threshold A buffer value for the size of the column to fit.\n * @return {number}\n */\nexport function getColumnSpan(itemWidth, columnWidth, columns, threshold) {\n  let columnSpan = itemWidth / columnWidth;\n\n  // If the difference between the rounded column span number and the\n  // calculated column span number is really small, round the number to\n  // make it fit.\n  if (Math.abs(Math.round(columnSpan) - columnSpan) < threshold) {\n    // e.g. columnSpan = 4.0089945390298745\n    columnSpan = Math.round(columnSpan);\n  }\n\n  // Ensure the column span is not more than the amount of columns in the whole layout.\n  return Math.min(Math.ceil(columnSpan), columns);\n}\n\n/**\n * Retrieves the column set to use for placement.\n * @param {number} columnSpan The number of columns this current item spans.\n * @param {number} columns The total columns in the grid.\n * @return {Array.<number>} An array of numbers representing the column set.\n */\nexport function getAvailablePositions(positions, columnSpan, columns) {\n  // The item spans only one column.\n  if (columnSpan === 1) {\n    return positions;\n  }\n\n  // The item spans more than one column, figure out how many different\n  // places it could fit horizontally.\n  // The group count is the number of places within the positions this block\n  // could fit, ignoring the current positions of items.\n  // Imagine a 2 column brick as the second item in a 4 column grid with\n  // 10px height each. Find the places it would fit:\n  // [20, 10, 10, 0]\n  //  |   |   |\n  //  *   *   *\n  //\n  // Then take the places which fit and get the bigger of the two:\n  // max([20, 10]), max([10, 10]), max([10, 0]) = [20, 10, 10]\n  //\n  // Next, find the first smallest number (the short column).\n  // [20, 10, 10]\n  //      |\n  //      *\n  //\n  // And that's where it should be placed!\n  //\n  // Another example where the second column's item extends past the first:\n  // [10, 20, 10, 0] => [20, 20, 10] => 10\n  const available = [];\n\n  // For how many possible positions for this item there are.\n  for (let i = 0; i <= columns - columnSpan; i++) {\n    // Find the bigger value for each place it could fit.\n    available.push(arrayMax(positions.slice(i, i + columnSpan)));\n  }\n\n  return available;\n}\n\n/**\n * Find index of short column, the first from the left where this item will go.\n *\n * @param {Array.<number>} positions The array to search for the smallest number.\n * @param {number} buffer Optional buffer which is very useful when the height\n *     is a percentage of the width.\n * @return {number} Index of the short column.\n */\nexport function getShortColumn(positions, buffer) {\n  const minPosition = arrayMin(positions);\n  for (let i = 0, len = positions.length; i < len; i++) {\n    if (positions[i] >= minPosition - buffer && positions[i] <= minPosition + buffer) {\n      return i;\n    }\n  }\n\n  return 0;\n}\n\n/**\n * Determine the location of the next item, based on its size.\n * @param {Object} itemSize Object with width and height.\n * @param {Array.<number>} positions Positions of the other current items.\n * @param {number} gridSize The column width or row height.\n * @param {number} total The total number of columns or rows.\n * @param {number} threshold Buffer value for the column to fit.\n * @param {number} buffer Vertical buffer for the height of items.\n * @return {Point}\n */\nexport function getItemPosition({ itemSize, positions, gridSize, total, threshold, buffer }) {\n  const span = getColumnSpan(itemSize.width, gridSize, total, threshold);\n  const setY = getAvailablePositions(positions, span, total);\n  const shortColumnIndex = getShortColumn(setY, buffer);\n\n  // Position the item\n  const point = new Point(gridSize * shortColumnIndex, setY[shortColumnIndex]);\n\n  // Update the columns array with the new values for each column.\n  // e.g. before the update the columns could be [250, 0, 0, 0] for an item\n  // which spans 2 columns. After it would be [250, itemHeight, itemHeight, 0].\n  const setHeight = setY[shortColumnIndex] + itemSize.height;\n  for (let i = 0; i < span; i++) {\n    positions[shortColumnIndex + i] = setHeight;\n  }\n\n  return point;\n}\n\n/**\n * This method attempts to center items. This method could potentially be slow\n * with a large number of items because it must place items, then check every\n * previous item to ensure there is no overlap.\n * @param {Array.<Rect>} itemRects Item data objects.\n * @param {number} containerWidth Width of the containing element.\n * @return {Array.<Point>}\n */\nexport function getCenteredPositions(itemRects, containerWidth) {\n  const rowMap = {};\n\n  // Populate rows by their offset because items could jump between rows like:\n  // a   c\n  //  bbb\n  itemRects.forEach((itemRect) => {\n    if (rowMap[itemRect.top]) {\n      // Push the point to the last row array.\n      rowMap[itemRect.top].push(itemRect);\n    } else {\n      // Start of a new row.\n      rowMap[itemRect.top] = [itemRect];\n    }\n  });\n\n  // For each row, find the end of the last item, then calculate\n  // the remaining space by dividing it by 2. Then add that\n  // offset to the x position of each point.\n  let rects = [];\n  const rows = [];\n  const centeredRows = [];\n  Object.keys(rowMap).forEach((key) => {\n    const itemRects = rowMap[key];\n    rows.push(itemRects);\n    const lastItem = itemRects[itemRects.length - 1];\n    const end = lastItem.left + lastItem.width;\n    const offset = Math.round((containerWidth - end) / 2);\n\n    let finalRects = itemRects;\n    let canMove = false;\n    if (offset > 0) {\n      const newRects = [];\n      canMove = itemRects.every((r) => {\n        const newRect = new Rect(r.left + offset, r.top, r.width, r.height, r.id);\n\n        // Check all current rects to make sure none overlap.\n        const noOverlap = !rects.some((r) => Rect.intersects(newRect, r));\n\n        newRects.push(newRect);\n        return noOverlap;\n      });\n\n      // If none of the rectangles overlapped, the whole group can be centered.\n      if (canMove) {\n        finalRects = newRects;\n      }\n    }\n\n    // If the items are not going to be offset, ensure that the original\n    // placement for this row will not overlap previous rows (row-spanning\n    // elements could be in the way).\n    if (!canMove) {\n      let intersectingRect;\n      const hasOverlap = itemRects.some((itemRect) =>\n        rects.some((r) => {\n          const intersects = Rect.intersects(itemRect, r);\n          if (intersects) {\n            intersectingRect = r;\n          }\n          return intersects;\n        }),\n      );\n\n      // If there is any overlap, replace the overlapping row with the original.\n      if (hasOverlap) {\n        const rowIndex = centeredRows.findIndex((items) => items.includes(intersectingRect));\n        centeredRows.splice(rowIndex, 1, rows[rowIndex]);\n      }\n    }\n\n    rects = rects.concat(finalRects);\n    centeredRows.push(finalRects);\n  });\n\n  // Reduce array of arrays to a single array of points.\n  // https://stackoverflow.com/a/10865042/373422\n  // Then reset sort back to how the items were passed to this method.\n  // Remove the wrapper object with index, map to a Point.\n  return centeredRows\n    .flat()\n    .sort((a, b) => a.id - b.id)\n    .map((itemRect) => new Point(itemRect.left, itemRect.top));\n}\n", "/**\n * Hyphenates a javascript style string to a css one. For example:\n * MozBoxSizing -> -moz-box-sizing.\n * @param {string} str The string to hyphenate.\n * @return {string} The hyphenated string.\n */\nexport default function hyphenate(str) {\n  return str.replace(/([A-Z])/g, (str, m1) => `-${m1.toLowerCase()}`);\n}\n", "import TinyEmitter from 'tiny-emitter';\nimport parallel from 'array-parallel';\n\nimport Point from './point';\nimport Rect from './rect';\nimport ShuffleItem from './shuffle-item';\nimport Classes from './classes';\nimport getNumberStyle from './get-number-style';\nimport sorter from './sorter';\nimport { onTransitionEnd, cancelTransitionEnd } from './on-transition-end';\nimport { getItemPosition, getColumnSpan, getAvailablePositions, getShortColumn, getCenteredPositions } from './layout';\nimport arrayMax from './array-max';\nimport hyphenate from './hyphenate';\n\nfunction arrayUnique(x) {\n  return Array.from(new Set(x));\n}\n\n// Used for unique instance variables\nlet id = 0;\n\nclass Shuffle extends TinyEmitter {\n  /**\n   * Categorize, sort, and filter a responsive grid of items.\n   *\n   * @param {Element} element An element which is the parent container for the grid items.\n   * @param {Object} [options=Shuffle.options] Options object.\n   * @constructor\n   */\n  constructor(element, options = {}) {\n    super();\n    this.options = { ...Shuffle.options, ...options };\n\n    this.lastSort = {};\n    this.group = Shuffle.ALL_ITEMS;\n    this.lastFilter = Shuffle.ALL_ITEMS;\n    this.isEnabled = true;\n    this.isDestroyed = false;\n    this.isInitialized = false;\n    this._transitions = [];\n    this.isTransitioning = false;\n    this._queue = [];\n\n    const el = this._getElementOption(element);\n\n    if (!el) {\n      throw new TypeError('Shuffle needs to be initialized with an element.');\n    }\n\n    this.element = el;\n    this.id = `shuffle_${id}`;\n    id += 1;\n\n    this._init();\n    this.isInitialized = true;\n  }\n\n  _init() {\n    this.items = this._getItems();\n    this.sortedItems = this.items;\n\n    this.options.sizer = this._getElementOption(this.options.sizer);\n\n    // Add class and invalidate styles\n    this.element.classList.add(Shuffle.Classes.BASE);\n\n    // Set initial css for each item\n    this._initItems(this.items);\n\n    // If the page has not already emitted the `load` event, call layout on load.\n    // This avoids layout issues caused by images and fonts loading after the\n    // instance has been initialized.\n    if (document.readyState !== 'complete') {\n      const layout = this.layout.bind(this);\n      window.addEventListener('load', function onLoad() {\n        window.removeEventListener('load', onLoad);\n        layout();\n      });\n    }\n\n    // Get container css all in one request. Causes reflow\n    const containerCss = window.getComputedStyle(this.element, null);\n    const containerWidth = Shuffle.getSize(this.element).width;\n\n    // Add styles to the container if it doesn't have them.\n    this._validateStyles(containerCss);\n\n    // We already got the container's width above, no need to cause another\n    // reflow getting it again... Calculate the number of columns there will be\n    this._setColumns(containerWidth);\n\n    // Kick off!\n    this.filter(this.options.group, this.options.initialSort);\n\n    // Bind resize events\n    this._rafId = null;\n    // This is true for all supported browsers, but just to be safe, avoid throwing\n    // an error if ResizeObserver is not present. You can manually add a window resize\n    // event and call `update()` if ResizeObserver is missing, or use Shuffle v5.\n    if ('ResizeObserver' in window) {\n      this._resizeObserver = new ResizeObserver(this._handleResizeCallback.bind(this));\n      this._resizeObserver.observe(this.element);\n    }\n\n    // The shuffle items haven't had transitions set on them yet so the user\n    // doesn't see the first layout. Set them now that the first layout is done.\n    // First, however, a synchronous layout must be caused for the previous\n    // styles to be applied without transitions.\n    this.element.offsetWidth; // eslint-disable-line no-unused-expressions\n    this.setItemTransitions(this.items);\n    this.element.style.transition = `height ${this.options.speed}ms ${this.options.easing}`;\n  }\n\n  /**\n   * Retrieve an element from an option.\n   * @param {string|jQuery|Element} option The option to check.\n   * @return {?Element} The plain element or null.\n   * @private\n   */\n  _getElementOption(option) {\n    // If column width is a string, treat is as a selector and search for the\n    // sizer element within the outermost container\n    if (typeof option === 'string') {\n      return this.element.querySelector(option);\n    }\n\n    // Check for an element\n    if (option && option.nodeType && option.nodeType === 1) {\n      return option;\n    }\n\n    // Check for jQuery object\n    if (option && option.jquery) {\n      return option[0];\n    }\n\n    return null;\n  }\n\n  /**\n   * Ensures the shuffle container has the css styles it needs applied to it.\n   * @param {Object} styles Key value pairs for position and overflow.\n   * @private\n   */\n  _validateStyles(styles) {\n    // Position cannot be static.\n    if (styles.position === 'static') {\n      this.element.style.position = 'relative';\n    }\n\n    // Overflow has to be hidden.\n    if (styles.overflow !== 'hidden') {\n      this.element.style.overflow = 'hidden';\n    }\n  }\n\n  /**\n   * Filter the elements by a category.\n   * @param {string|string[]|function(Element):boolean} [category] Category to\n   *     filter by. If it's given, the last category will be used to filter the items.\n   * @param {Array} [collection] Optionally filter a collection. Defaults to\n   *     all the items.\n   * @return {{visible: ShuffleItem[], hidden: ShuffleItem[]}}\n   * @private\n   */\n  _filter(category = this.lastFilter, collection = this.items) {\n    const set = this._getFilteredSets(category, collection);\n\n    // Individually add/remove hidden/visible classes\n    this._toggleFilterClasses(set);\n\n    // Save the last filter in case elements are appended.\n    this.lastFilter = category;\n\n    // This is saved mainly because providing a filter function (like searching)\n    // will overwrite the `lastFilter` property every time its called.\n    if (typeof category === 'string') {\n      this.group = category;\n    }\n\n    return set;\n  }\n\n  /**\n   * Returns an object containing the visible and hidden elements.\n   * @param {string|string[]|function(Element):boolean} category Category or function to filter by.\n   * @param {ShuffleItem[]} items A collection of items to filter.\n   * @return {{visible: ShuffleItem[], hidden: ShuffleItem[]}}\n   * @private\n   */\n  _getFilteredSets(category, items) {\n    let visible = [];\n    const hidden = [];\n\n    // category === 'all', add visible class to everything\n    if (category === Shuffle.ALL_ITEMS) {\n      visible = items;\n\n      // Loop through each item and use provided function to determine\n      // whether to hide it or not.\n    } else {\n      items.forEach((item) => {\n        if (this._doesPassFilter(category, item.element)) {\n          visible.push(item);\n        } else {\n          hidden.push(item);\n        }\n      });\n    }\n\n    return {\n      visible,\n      hidden,\n    };\n  }\n\n  /**\n   * Test an item to see if it passes a category.\n   * @param {string|string[]|function():boolean} category Category or function to filter by.\n   * @param {Element} element An element to test.\n   * @return {boolean} Whether it passes the category/filter.\n   * @private\n   */\n  _doesPassFilter(category, element) {\n    if (typeof category === 'function') {\n      return category.call(element, element, this);\n    }\n\n    // Check each element's data-groups attribute against the given category.\n    const attr = element.dataset[Shuffle.FILTER_ATTRIBUTE_KEY];\n    const keys = this.options.delimiter ? attr.split(this.options.delimiter) : JSON.parse(attr);\n\n    function testCategory(category) {\n      return keys.includes(category);\n    }\n\n    if (Array.isArray(category)) {\n      if (this.options.filterMode === Shuffle.FilterMode.ANY) {\n        return category.some(testCategory);\n      }\n      return category.every(testCategory);\n    }\n\n    return keys.includes(category);\n  }\n\n  /**\n   * Toggles the visible and hidden class names.\n   * @param {{visible, hidden}} Object with visible and hidden arrays.\n   * @private\n   */\n  _toggleFilterClasses({ visible, hidden }) {\n    visible.forEach((item) => {\n      item.show();\n    });\n\n    hidden.forEach((item) => {\n      item.hide();\n    });\n  }\n\n  /**\n   * Set the initial css for each item\n   * @param {ShuffleItem[]} items Set to initialize.\n   * @private\n   */\n  _initItems(items) {\n    items.forEach((item) => {\n      item.init();\n    });\n  }\n\n  /**\n   * Remove element reference and styles.\n   * @param {ShuffleItem[]} items Set to dispose.\n   * @private\n   */\n  _disposeItems(items) {\n    items.forEach((item) => {\n      item.dispose();\n    });\n  }\n\n  /**\n   * Updates the visible item count.\n   * @private\n   */\n  _updateItemCount() {\n    this.visibleItems = this._getFilteredItems().length;\n  }\n\n  /**\n   * Sets css transform transition on a group of elements. This is not executed\n   * at the same time as `item.init` so that transitions don't occur upon\n   * initialization of a new Shuffle instance.\n   * @param {ShuffleItem[]} items Shuffle items to set transitions on.\n   * @protected\n   */\n  setItemTransitions(items) {\n    const { speed, easing } = this.options;\n    const positionProps = this.options.useTransforms ? ['transform'] : ['top', 'left'];\n\n    // Allow users to transition other properties if they exist in the `before`\n    // css mapping of the shuffle item.\n    const cssProps = Object.keys(ShuffleItem.Css.HIDDEN.before).map((k) => hyphenate(k));\n    const properties = positionProps.concat(cssProps).join();\n\n    items.forEach((item) => {\n      item.element.style.transitionDuration = `${speed}ms`;\n      item.element.style.transitionTimingFunction = easing;\n      item.element.style.transitionProperty = properties;\n    });\n  }\n\n  _getItems() {\n    return Array.from(this.element.children)\n      .filter((el) => el.matches(this.options.itemSelector))\n      .map((el) => new ShuffleItem(el, this.options.isRTL));\n  }\n\n  /**\n   * Combine the current items array with a new one and sort it by DOM order.\n   * @param {ShuffleItem[]} items Items to track.\n   * @return {ShuffleItem[]}\n   */\n  _mergeNewItems(items) {\n    const children = Array.from(this.element.children);\n    return sorter(this.items.concat(items), {\n      by(element) {\n        return children.indexOf(element);\n      },\n    });\n  }\n\n  _getFilteredItems() {\n    return this.items.filter((item) => item.isVisible);\n  }\n\n  _getConcealedItems() {\n    return this.items.filter((item) => !item.isVisible);\n  }\n\n  /**\n   * Returns the column size, based on column width and sizer options.\n   * @param {number} containerWidth Size of the parent container.\n   * @param {number} gutterSize Size of the gutters.\n   * @return {number}\n   * @private\n   */\n  _getColumnSize(containerWidth, gutterSize) {\n    let size;\n\n    // If the columnWidth property is a function, then the grid is fluid\n    if (typeof this.options.columnWidth === 'function') {\n      size = this.options.columnWidth(containerWidth);\n\n      // columnWidth option isn't a function, are they using a sizing element?\n    } else if (this.options.sizer) {\n      size = Shuffle.getSize(this.options.sizer).width;\n\n      // if not, how about the explicitly set option?\n    } else if (this.options.columnWidth) {\n      size = this.options.columnWidth;\n\n      // or use the size of the first item\n    } else if (this.items.length > 0) {\n      size = Shuffle.getSize(this.items[0].element, true).width;\n\n      // if there's no items, use size of container\n    } else {\n      size = containerWidth;\n    }\n\n    // Don't let them set a column width of zero.\n    if (size === 0) {\n      size = containerWidth;\n    }\n\n    return size + gutterSize;\n  }\n\n  /**\n   * Returns the gutter size, based on gutter width and sizer options.\n   * @param {number} containerWidth Size of the parent container.\n   * @return {number}\n   * @private\n   */\n  _getGutterSize(containerWidth) {\n    let size;\n    if (typeof this.options.gutterWidth === 'function') {\n      size = this.options.gutterWidth(containerWidth);\n    } else if (this.options.sizer) {\n      size = getNumberStyle(this.options.sizer, 'marginLeft');\n    } else {\n      size = this.options.gutterWidth;\n    }\n\n    return size;\n  }\n\n  /**\n   * Calculate the number of columns to be used. Gets css if using sizer element.\n   * @param {number} [containerWidth] Optionally specify a container width if\n   *    it's already available.\n   */\n  _setColumns(containerWidth = Shuffle.getSize(this.element).width) {\n    const gutter = this._getGutterSize(containerWidth);\n    const columnWidth = this._getColumnSize(containerWidth, gutter);\n    let calculatedColumns = (containerWidth + gutter) / columnWidth;\n\n    // Widths given from getStyles are not precise enough...\n    if (Math.abs(Math.round(calculatedColumns) - calculatedColumns) < this.options.columnThreshold) {\n      // e.g. calculatedColumns = 11.998876\n      calculatedColumns = Math.round(calculatedColumns);\n    }\n\n    this.cols = Math.max(Math.floor(calculatedColumns || 0), 1);\n    this.containerWidth = containerWidth;\n    this.colWidth = columnWidth;\n  }\n\n  /**\n   * Adjust the height of the grid\n   */\n  _setContainerSize() {\n    this.element.style.height = `${this._getContainerSize()}px`;\n  }\n\n  /**\n   * Based on the column heights, it returns the biggest one.\n   * @return {number}\n   * @private\n   */\n  _getContainerSize() {\n    return arrayMax(this.positions);\n  }\n\n  /**\n   * Get the clamped stagger amount.\n   * @param {number} index Index of the item to be staggered.\n   * @return {number}\n   */\n  _getStaggerAmount(index) {\n    return Math.min(index * this.options.staggerAmount, this.options.staggerAmountMax);\n  }\n\n  /**\n   * Emit an event from this instance.\n   * @param {string} name Event name.\n   * @param {Object} [data={}] Optional object data.\n   */\n  _dispatch(name, data = {}) {\n    if (this.isDestroyed) {\n      return;\n    }\n\n    data.shuffle = this;\n    this.emit(name, data);\n  }\n\n  /**\n   * Zeros out the y columns array, which is used to determine item placement.\n   * @private\n   */\n  _resetCols() {\n    let i = this.cols;\n    this.positions = [];\n    while (i) {\n      i -= 1;\n      this.positions.push(0);\n    }\n  }\n\n  /**\n   * Loops through each item that should be shown and calculates the x, y position.\n   * @param {ShuffleItem[]} items Array of items that will be shown/layed\n   *     out in order in their array.\n   */\n  _layout(items) {\n    const itemPositions = this._getNextPositions(items);\n\n    let count = 0;\n    items.forEach((item, i) => {\n      function callback() {\n        item.applyCss(ShuffleItem.Css.VISIBLE.after);\n      }\n\n      // If the item will not change its position, do not add it to the render\n      // queue. Transitions don't fire when setting a property to the same value.\n      if (Point.equals(item.point, itemPositions[i]) && !item.isHidden) {\n        item.applyCss(ShuffleItem.Css.VISIBLE.before);\n        callback();\n        return;\n      }\n\n      item.point = itemPositions[i];\n      item.scale = ShuffleItem.Scale.VISIBLE;\n      item.isHidden = false;\n\n      // Clone the object so that the `before` object isn't modified when the\n      // transition delay is added.\n      const styles = this.getStylesForTransition(item, ShuffleItem.Css.VISIBLE.before);\n      styles.transitionDelay = `${this._getStaggerAmount(count)}ms`;\n\n      this._queue.push({\n        item,\n        styles,\n        callback,\n      });\n\n      count += 1;\n    });\n  }\n\n  /**\n   * Return an array of Point instances representing the future positions of\n   * each item.\n   * @param {ShuffleItem[]} items Array of sorted shuffle items.\n   * @return {Point[]}\n   * @private\n   */\n  _getNextPositions(items) {\n    // If position data is going to be changed, add the item's size to the\n    // transformer to allow for calculations.\n    if (this.options.isCentered) {\n      const itemsData = items.map((item, i) => {\n        const itemSize = Shuffle.getSize(item.element, true);\n        const point = this._getItemPosition(itemSize);\n        return new Rect(point.x, point.y, itemSize.width, itemSize.height, i);\n      });\n\n      return this.getTransformedPositions(itemsData, this.containerWidth);\n    }\n\n    // If no transforms are going to happen, simply return an array of the\n    // future points of each item.\n    return items.map((item) => this._getItemPosition(Shuffle.getSize(item.element, true)));\n  }\n\n  /**\n   * Determine the location of the next item, based on its size.\n   * @param {{width: number, height: number}} itemSize Object with width and height.\n   * @return {Point}\n   * @private\n   */\n  _getItemPosition(itemSize) {\n    return getItemPosition({\n      itemSize,\n      positions: this.positions,\n      gridSize: this.colWidth,\n      total: this.cols,\n      threshold: this.options.columnThreshold,\n      buffer: this.options.buffer,\n    });\n  }\n\n  /**\n   * Mutate positions before they're applied.\n   * @param {Rect[]} itemRects Item data objects.\n   * @param {number} containerWidth Width of the containing element.\n   * @return {Point[]}\n   * @protected\n   */\n  getTransformedPositions(itemRects, containerWidth) {\n    return getCenteredPositions(itemRects, containerWidth);\n  }\n\n  /**\n   * Hides the elements that don't match our filter.\n   * @param {ShuffleItem[]} collection Collection to shrink.\n   * @private\n   */\n  _shrink(collection = this._getConcealedItems()) {\n    let count = 0;\n    collection.forEach((item) => {\n      function callback() {\n        item.applyCss(ShuffleItem.Css.HIDDEN.after);\n      }\n\n      // Continuing would add a transitionend event listener to the element, but\n      // that listener would not execute because the transform and opacity would\n      // stay the same.\n      // The callback is executed here because it is not guaranteed to be called\n      // after the transitionend event because the transitionend could be\n      // canceled if another animation starts.\n      if (item.isHidden) {\n        item.applyCss(ShuffleItem.Css.HIDDEN.before);\n        callback();\n        return;\n      }\n\n      item.scale = ShuffleItem.Scale.HIDDEN;\n      item.isHidden = true;\n\n      const styles = this.getStylesForTransition(item, ShuffleItem.Css.HIDDEN.before);\n      styles.transitionDelay = `${this._getStaggerAmount(count)}ms`;\n\n      this._queue.push({\n        item,\n        styles,\n        callback,\n      });\n\n      count += 1;\n    });\n  }\n\n  /**\n   * Resize handler.\n   * @param {ResizeObserverEntry[]} entries\n   */\n  _handleResizeCallback(entries) {\n    // If shuffle is disabled, destroyed, don't do anything.\n    // You can still manually force a shuffle update with shuffle.update({ force: true }).\n    if (!this.isEnabled || this.isDestroyed) {\n      return;\n    }\n\n    // The reason ESLint disables this is because for..of generates a lot of extra\n    // code using Babel, but Shuffle no longer supports browsers that old, so\n    // nothing to worry about.\n    // eslint-disable-next-line no-restricted-syntax\n    for (const entry of entries) {\n      if (Math.round(entry.contentRect.width) !== Math.round(this.containerWidth)) {\n        // If there was already an animation waiting, cancel it.\n        cancelAnimationFrame(this._rafId);\n        // Offload updating the DOM until the browser is ready.\n        this._rafId = requestAnimationFrame(this.update.bind(this));\n      }\n    }\n  }\n\n  /**\n   * Returns styles which will be applied to the an item for a transition.\n   * @param {ShuffleItem} item Item to get styles for. Should have updated\n   *   scale and point properties.\n   * @param {Object} styleObject Extra styles that will be used in the transition.\n   * @return {!Object} Transforms for transitions, left/top for animate.\n   * @protected\n   */\n  getStylesForTransition(item, styleObject) {\n    // Clone the object to avoid mutating the original.\n    const styles = { ...styleObject };\n\n    if (this.options.useTransforms) {\n      const sign = this.options.isRTL ? '-' : '';\n      const x = this.options.roundTransforms ? Math.round(item.point.x) : item.point.x;\n      const y = this.options.roundTransforms ? Math.round(item.point.y) : item.point.y;\n      styles.transform = `translate(${sign}${x}px, ${y}px) scale(${item.scale})`;\n    } else {\n      if (this.options.isRTL) {\n        styles.right = `${item.point.x}px`;\n      } else {\n        styles.left = `${item.point.x}px`;\n      }\n      styles.top = `${item.point.y}px`;\n    }\n\n    return styles;\n  }\n\n  /**\n   * Listen for the transition end on an element and execute the itemCallback\n   * when it finishes.\n   * @param {Element} element Element to listen on.\n   * @param {function} itemCallback Callback for the item.\n   * @param {function} done Callback to notify `parallel` that this one is done.\n   */\n  _whenTransitionDone(element, itemCallback, done) {\n    const id = onTransitionEnd(element, (evt) => {\n      itemCallback();\n      done(null, evt);\n    });\n\n    this._transitions.push(id);\n  }\n\n  /**\n   * Return a function which will set CSS styles and call the `done` function\n   * when (if) the transition finishes.\n   * @param {Object} opts Transition object.\n   * @return {function} A function to be called with a `done` function.\n   */\n  _getTransitionFunction(opts) {\n    return (done) => {\n      opts.item.applyCss(opts.styles);\n      this._whenTransitionDone(opts.item.element, opts.callback, done);\n    };\n  }\n\n  /**\n   * Execute the styles gathered in the style queue. This applies styles to elements,\n   * triggering transitions.\n   * @private\n   */\n  _processQueue() {\n    if (this.isTransitioning) {\n      this._cancelMovement();\n    }\n\n    const hasSpeed = this.options.speed > 0;\n    const hasQueue = this._queue.length > 0;\n\n    if (hasQueue && hasSpeed && this.isInitialized) {\n      this._startTransitions(this._queue);\n    } else if (hasQueue) {\n      this._styleImmediately(this._queue);\n      this._dispatch(Shuffle.EventType.LAYOUT);\n\n      // A call to layout happened, but none of the newly visible items will\n      // change position or the transition duration is zero, which will not trigger\n      // the transitionend event.\n    } else {\n      this._dispatch(Shuffle.EventType.LAYOUT);\n    }\n\n    // Remove everything in the style queue\n    this._queue.length = 0;\n  }\n\n  /**\n   * Wait for each transition to finish, the emit the layout event.\n   * @param {Object[]} transitions Array of transition objects.\n   */\n  _startTransitions(transitions) {\n    // Set flag that shuffle is currently in motion.\n    this.isTransitioning = true;\n\n    // Create an array of functions to be called.\n    const callbacks = transitions.map((obj) => this._getTransitionFunction(obj));\n\n    parallel(callbacks, this._movementFinished.bind(this));\n  }\n\n  _cancelMovement() {\n    // Remove the transition end event for each listener.\n    this._transitions.forEach(cancelTransitionEnd);\n\n    // Reset the array.\n    this._transitions.length = 0;\n\n    // Show it's no longer active.\n    this.isTransitioning = false;\n  }\n\n  /**\n   * Apply styles without a transition.\n   * @param {Object[]} objects Array of transition objects.\n   * @private\n   */\n  _styleImmediately(objects) {\n    if (objects.length) {\n      const elements = objects.map((obj) => obj.item.element);\n\n      Shuffle._skipTransitions(elements, () => {\n        objects.forEach((obj) => {\n          obj.item.applyCss(obj.styles);\n          obj.callback();\n        });\n      });\n    }\n  }\n\n  _movementFinished() {\n    this._transitions.length = 0;\n    this.isTransitioning = false;\n    this._dispatch(Shuffle.EventType.LAYOUT);\n  }\n\n  /**\n   * The magic. This is what makes the plugin 'shuffle'\n   * @param {string|string[]|function(Element):boolean} [category] Category to filter by.\n   *     Can be a function, string, or array of strings.\n   * @param {SortOptions} [sortOptions] A sort object which can sort the visible set\n   */\n  filter(category, sortOptions) {\n    if (!this.isEnabled) {\n      return;\n    }\n\n    if (!category || (category && category.length === 0)) {\n      category = Shuffle.ALL_ITEMS; // eslint-disable-line no-param-reassign\n    }\n\n    this._filter(category);\n\n    // Shrink each hidden item\n    this._shrink();\n\n    // How many visible elements?\n    this._updateItemCount();\n\n    // Update transforms on visible elements so they will animate to their new positions.\n    this.sort(sortOptions);\n  }\n\n  /**\n   * Gets the visible elements, sorts them, and passes them to layout.\n   * @param {SortOptions} [sortOptions] The options object to pass to `sorter`.\n   */\n  sort(sortOptions = this.lastSort) {\n    if (!this.isEnabled) {\n      return;\n    }\n\n    this._resetCols();\n\n    const items = sorter(this._getFilteredItems(), sortOptions);\n    this.sortedItems = items;\n\n    this._layout(items);\n\n    // `_layout` always happens after `_shrink`, so it's safe to process the style\n    // queue here with styles from the shrink method.\n    this._processQueue();\n\n    // Adjust the height of the container.\n    this._setContainerSize();\n\n    this.lastSort = sortOptions;\n  }\n\n  /**\n   * Reposition everything.\n   * @param {object} options options object\n   * @param {boolean} [options.recalculateSizes=true] Whether to calculate column, gutter, and container widths again.\n   * @param {boolean} [options.force=false] By default, `update` does nothing if the instance is disabled. Setting this\n   *    to true forces the update to happen regardless.\n   */\n  update({ recalculateSizes = true, force = false } = {}) {\n    if (this.isEnabled || force) {\n      if (recalculateSizes) {\n        this._setColumns();\n      }\n\n      // Layout items\n      this.sort();\n    }\n  }\n\n  /**\n   * Use this instead of `update()` if you don't need the columns and gutters updated\n   * Maybe an image inside `shuffle` loaded (and now has a height), which means calculations\n   * could be off.\n   */\n  layout() {\n    this.update({\n      recalculateSizes: true,\n    });\n  }\n\n  /**\n   * New items have been appended to shuffle. Mix them in with the current\n   * filter or sort status.\n   * @param {Element[]} newItems Collection of new items.\n   */\n  add(newItems) {\n    const items = arrayUnique(newItems).map((el) => new ShuffleItem(el, this.options.isRTL));\n\n    // Add classes and set initial positions.\n    this._initItems(items);\n\n    // Determine which items will go with the current filter.\n    this._resetCols();\n\n    const allItems = this._mergeNewItems(items);\n    const sortedItems = sorter(allItems, this.lastSort);\n    const allSortedItemsSet = this._filter(this.lastFilter, sortedItems);\n\n    const isNewItem = (item) => items.includes(item);\n    const applyHiddenState = (item) => {\n      item.scale = ShuffleItem.Scale.HIDDEN;\n      item.isHidden = true;\n      item.applyCss(ShuffleItem.Css.HIDDEN.before);\n      item.applyCss(ShuffleItem.Css.HIDDEN.after);\n    };\n\n    // Layout all items again so that new items get positions.\n    // Synchronously apply positions.\n    const itemPositions = this._getNextPositions(allSortedItemsSet.visible);\n    allSortedItemsSet.visible.forEach((item, i) => {\n      if (isNewItem(item)) {\n        item.point = itemPositions[i];\n        applyHiddenState(item);\n        item.applyCss(this.getStylesForTransition(item, {}));\n      }\n    });\n\n    allSortedItemsSet.hidden.forEach((item) => {\n      if (isNewItem(item)) {\n        applyHiddenState(item);\n      }\n    });\n\n    // Cause layout so that the styles above are applied.\n    this.element.offsetWidth; // eslint-disable-line no-unused-expressions\n\n    // Add transition to each item.\n    this.setItemTransitions(items);\n\n    // Update the list of items.\n    this.items = this._mergeNewItems(items);\n\n    // Update layout/visibility of new and old items.\n    this.filter(this.lastFilter);\n  }\n\n  /**\n   * Disables shuffle from updating dimensions and layout on resize\n   */\n  disable() {\n    this.isEnabled = false;\n  }\n\n  /**\n   * Enables shuffle again\n   * @param {boolean} [isUpdateLayout=true] if undefined, shuffle will update columns and gutters\n   */\n  enable(isUpdateLayout = true) {\n    this.isEnabled = true;\n    if (isUpdateLayout) {\n      this.update();\n    }\n  }\n\n  /**\n   * Remove 1 or more shuffle items.\n   * @param {Element[]} elements An array containing one or more\n   *     elements in shuffle\n   * @return {Shuffle} The shuffle instance.\n   */\n  remove(elements) {\n    if (!elements.length) {\n      return;\n    }\n\n    const collection = arrayUnique(elements);\n\n    const oldItems = collection.map((element) => this.getItemByElement(element)).filter((item) => !!item);\n\n    const handleLayout = () => {\n      this._disposeItems(oldItems);\n\n      // Remove the collection in the callback\n      collection.forEach((element) => {\n        element.parentNode.removeChild(element);\n      });\n\n      this._dispatch(Shuffle.EventType.REMOVED, { collection });\n    };\n\n    // Hide collection first.\n    this._toggleFilterClasses({\n      visible: [],\n      hidden: oldItems,\n    });\n\n    this._shrink(oldItems);\n\n    this.sort();\n\n    // Update the list of items here because `remove` could be called again\n    // with an item that is in the process of being removed.\n    this.items = this.items.filter((item) => !oldItems.includes(item));\n    this._updateItemCount();\n\n    this.once(Shuffle.EventType.LAYOUT, handleLayout);\n  }\n\n  /**\n   * Retrieve a shuffle item by its element.\n   * @param {Element} element Element to look for.\n   * @return {?ShuffleItem} A shuffle item or undefined if it's not found.\n   */\n  getItemByElement(element) {\n    return this.items.find((item) => item.element === element);\n  }\n\n  /**\n   * Dump the elements currently stored and reinitialize all child elements which\n   * match the `itemSelector`.\n   */\n  resetItems() {\n    // Remove refs to current items.\n    this._disposeItems(this.items);\n    this.isInitialized = false;\n\n    // Find new items in the DOM.\n    this.items = this._getItems();\n\n    // Set initial styles on the new items.\n    this._initItems(this.items);\n\n    this.once(Shuffle.EventType.LAYOUT, () => {\n      // Add transition to each item.\n      this.setItemTransitions(this.items);\n      this.isInitialized = true;\n    });\n\n    // Lay out all items.\n    this.filter(this.lastFilter);\n  }\n\n  /**\n   * Destroys shuffle, removes events, styles, and classes\n   */\n  destroy() {\n    this._cancelMovement();\n    if (this._resizeObserver) {\n      this._resizeObserver.unobserve(this.element);\n      this._resizeObserver = null;\n    }\n\n    // Reset container styles\n    this.element.classList.remove('shuffle');\n    this.element.removeAttribute('style');\n\n    // Reset individual item styles\n    this._disposeItems(this.items);\n\n    this.items.length = 0;\n    this.sortedItems.length = 0;\n    this._transitions.length = 0;\n\n    // Null DOM references\n    this.options.sizer = null;\n    this.element = null;\n\n    // Set a flag so if a debounced resize has been triggered,\n    // it can first check if it is actually isDestroyed and not doing anything\n    this.isDestroyed = true;\n    this.isEnabled = false;\n  }\n\n  /**\n   * Returns the outer width of an element, optionally including its margins.\n   *\n   * There are a few different methods for getting the width of an element, none of\n   * which work perfectly for all Shuffle's use cases.\n   *\n   * 1. getBoundingClientRect() `left` and `right` properties.\n   *   - Accounts for transform scaled elements, making it useless for Shuffle\n   *   elements which have shrunk.\n   * 2. The `offsetWidth` property.\n   *   - This value stays the same regardless of the elements transform property,\n   *   however, it does not return subpixel values.\n   * 3. getComputedStyle()\n   *   - This works great Chrome, Firefox, Safari, but IE<=11 does not include\n   *   padding and border when box-sizing: border-box is set, requiring a feature\n   *   test and extra work to add the padding back for IE and other browsers which\n   *   follow the W3C spec here.\n   *\n   * @param {Element} element The element.\n   * @param {boolean} [includeMargins=false] Whether to include margins.\n   * @return {{width: number, height: number}} The width and height.\n   */\n  static getSize(element, includeMargins = false) {\n    // Store the styles so that they can be used by others without asking for it again.\n    const styles = window.getComputedStyle(element, null);\n    let width = getNumberStyle(element, 'width', styles);\n    let height = getNumberStyle(element, 'height', styles);\n\n    if (includeMargins) {\n      const marginLeft = getNumberStyle(element, 'marginLeft', styles);\n      const marginRight = getNumberStyle(element, 'marginRight', styles);\n      const marginTop = getNumberStyle(element, 'marginTop', styles);\n      const marginBottom = getNumberStyle(element, 'marginBottom', styles);\n      width += marginLeft + marginRight;\n      height += marginTop + marginBottom;\n    }\n\n    return {\n      width,\n      height,\n    };\n  }\n\n  /**\n   * Change a property or execute a function which will not have a transition\n   * @param {Element[]} elements DOM elements that won't be transitioned.\n   * @param {function} callback A function which will be called while transition\n   *     is set to 0ms.\n   * @private\n   */\n  static _skipTransitions(elements, callback) {\n    const zero = '0ms';\n\n    // Save current duration and delay.\n    const data = elements.map((element) => {\n      const { style } = element;\n      const duration = style.transitionDuration;\n      const delay = style.transitionDelay;\n\n      // Set the duration to zero so it happens immediately\n      style.transitionDuration = zero;\n      style.transitionDelay = zero;\n\n      return {\n        duration,\n        delay,\n      };\n    });\n\n    callback();\n\n    // Cause forced synchronous layout.\n    elements[0].offsetWidth; // eslint-disable-line no-unused-expressions\n\n    // Put the duration back\n    elements.forEach((element, i) => {\n      element.style.transitionDuration = data[i].duration;\n      element.style.transitionDelay = data[i].delay;\n    });\n  }\n}\n\nShuffle.ShuffleItem = ShuffleItem;\n\nShuffle.ALL_ITEMS = 'all';\nShuffle.FILTER_ATTRIBUTE_KEY = 'groups';\n\n/** @enum {string} */\nShuffle.EventType = {\n  LAYOUT: 'shuffle:layout',\n  REMOVED: 'shuffle:removed',\n};\n\n/** @enum {string} */\nShuffle.Classes = Classes;\n\n/** @enum {string} */\nShuffle.FilterMode = {\n  ANY: 'any',\n  ALL: 'all',\n};\n\n// Overridable options\nShuffle.options = {\n  // Initial filter group.\n  group: Shuffle.ALL_ITEMS,\n\n  // Transition/animation speed (milliseconds).\n  speed: 250,\n\n  // CSS easing function to use.\n  easing: 'cubic-bezier(0.4, 0.0, 0.2, 1)',\n\n  // e.g. '.picture-item'.\n  itemSelector: '*',\n\n  // Element or selector string. Use an element to determine the size of columns\n  // and gutters.\n  sizer: null,\n\n  // A static number or function that tells the plugin how wide the gutters\n  // between columns are (in pixels).\n  gutterWidth: 0,\n\n  // A static number or function that returns a number which tells the plugin\n  // how wide the columns are (in pixels).\n  columnWidth: 0,\n\n  // If your group is not json, and is comma delimited, you could set delimiter\n  // to ','.\n  delimiter: null,\n\n  // Useful for percentage based heights when they might not always be exactly\n  // the same (in pixels).\n  buffer: 0,\n\n  // Reading the width of elements isn't precise enough and can cause columns to\n  // jump between values.\n  columnThreshold: 0.01,\n\n  // Shuffle can be initialized with a sort object. It is the same object\n  // given to the sort method.\n  initialSort: null,\n\n  // Transition delay offset for each item in milliseconds.\n  staggerAmount: 15,\n\n  // Maximum stagger delay in milliseconds.\n  staggerAmountMax: 150,\n\n  // Whether to use transforms or absolute positioning.\n  useTransforms: true,\n\n  // Affects using an array with filter. e.g. `filter(['one', 'two'])`. With \"any\",\n  // the element passes the test if any of its groups are in the array. With \"all\",\n  // the element only passes if all groups are in the array.\n  // Note, this has no effect if you supply a custom filter function.\n  filterMode: Shuffle.FilterMode.ANY,\n\n  // Attempt to center grid items in each row.\n  isCentered: false,\n\n  // Attempt to align grid items to right.\n  isRTL: false,\n\n  // Whether to round pixel values used in translate(x, y). This usually avoids\n  // blurriness.\n  roundTransforms: true,\n};\n\nShuffle.Point = Point;\nShuffle.Rect = Rect;\n\n// Expose for testing. Hack at your own risk.\nShuffle.__sorter = sorter;\nShuffle.__getColumnSpan = getColumnSpan;\nShuffle.__getAvailablePositions = getAvailablePositions;\nShuffle.__getShortColumn = getShortColumn;\nShuffle.__getCenteredPositions = getCenteredPositions;\n\nexport default Shuffle;\n"],
  "mappings": "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",
  "names": ["tinyEmitterModule", "tinyEmitter", "getNumber", "value", "parseFloat", "Point", "constructor", "x", "y", "equals", "a", "b", "Rect", "w", "h", "id", "left", "top", "width", "height", "intersects", "BASE", "SHUFFLE_ITEM", "VISIBLE", "HIDDEN", "ShuffleItem", "element", "isRTL", "isVisible", "isHidden", "show", "classList", "remove", "Classes", "add", "removeAttribute", "hide", "setAttribute", "init", "addClasses", "applyCss", "Css", "INITIAL", "DIRECTION", "rtl", "ltr", "scale", "Scale", "point", "classes", "forEach", "className", "removeClasses", "obj", "Object", "keys", "key", "style", "dispose", "position", "visibility", "willChange", "right", "before", "opacity", "after", "transitionDelay", "document", "body", "documentElement", "e", "createElement", "cssText", "appendChild", "window", "getComputedStyle", "Math", "round", "removeChild", "getNumberStyle", "styles", "arguments", "length", "undefined", "testComputedSize", "paddingLeft", "paddingRight", "borderLeftWidth", "borderRightWidth", "paddingTop", "paddingBottom", "borderTopWidth", "borderBottomWidth", "randomize", "array", "n", "i", "floor", "random", "temp", "defaults", "reverse", "by", "compare", "sorter", "arr", "options", "opts", "original", "Array", "from", "revert", "sort", "valA", "valB", "transitions", "eventName", "count", "uniqueId", "cancelTransitionEnd", "removeEventListener", "listener", "onTransitionEnd", "callback", "evt", "currentTarget", "target", "addEventListener", "arrayMax", "max", "arrayMin", "min", "getColumnSpan", "itemWidth", "columnWidth", "columns", "threshold", "columnSpan", "abs", "ceil", "getAvailablePositions", "positions", "available", "push", "slice", "getShortColumn", "buffer", "minPosition", "len", "getItemPosition", "_ref", "itemSize", "gridSize", "total", "span", "setY", "shortColumnIndex", "setHeight", "getCenteredPositions", "itemRects", "containerWidth", "rowMap", "itemRect", "rects", "rows", "centeredRows", "lastItem", "end", "offset", "finalRects", "canMove", "newRects", "every", "r", "newRect", "noOverlap", "some", "intersectingRect", "hasOverlap", "rowIndex", "findIndex", "items", "includes", "splice", "concat", "flat", "map", "hyphenate", "str", "replace", "m1", "toLowerCase", "arrayUnique", "Set", "Shuffle", "TinyEmitter", "lastSort", "group", "ALL_ITEMS", "lastFilter", "isEnabled", "isDestroyed", "isInitialized", "_transitions", "isTransitioning", "_queue", "el", "_getElementOption", "TypeError", "_init", "_getItems", "sortedItems", "sizer", "_initItems", "readyState", "layout", "bind", "onLoad", "containerCss", "getSize", "_validateStyles", "_setColumns", "filter", "initialSort", "_rafId", "_resizeObserver", "ResizeObserver", "_handleResizeCallback", "observe", "offsetWidth", "setItemTransitions", "transition", "speed", "easing", "option", "querySelector", "nodeType", "jquery", "overflow", "_filter", "category", "collection", "set", "_getFilteredSets", "_toggleFilterClasses", "visible", "hidden", "item", "_doesPassFilter", "call", "attr", "dataset", "FILTER_ATTRIBUTE_KEY", "delimiter", "split", "JSON", "parse", "testCategory", "isArray", "filterMode", "FilterMode", "ANY", "_disposeItems", "_updateItemCount", "visibleItems", "_getFilteredItems", "positionProps", "useTransforms", "cssProps", "k", "properties", "join", "transitionDuration", "transitionTimingFunction", "transitionProperty", "children", "matches", "itemSelector", "_mergeNewItems", "indexOf", "_getConcealedItems", "_getColumnSize", "gutterSize", "size", "_getGutterSize", "gutterWidth", "gutter", "calculatedColumns", "columnThreshold", "cols", "colWidth", "_setContainerSize", "_getContainerSize", "_getStaggerAmount", "index", "staggerAmount", "staggerAmountMax", "_dispatch", "name", "data", "shuffle", "emit", "_resetCols", "_layout", "itemPositions", "_getNextPositions", "getStylesForTransition", "isCentered", "itemsData", "_getItemPosition", "getTransformedPositions", "_shrink", "entries", "entry", "contentRect", "cancelAnimationFrame", "requestAnimationFrame", "update", "styleObject", "sign", "roundTransforms", "transform", "_whenTransitionDone", "itemCallback", "done", "_getTransitionFunction", "_processQueue", "_cancelMovement", "hasSpeed", "hasQueue", "_startTransitions", "_styleImmediately", "EventType", "LAYOUT", "callbacks", "parallel", "_movementFinished", "objects", "elements", "_skipTransitions", "sortOptions", "recalculateSizes", "force", "newItems", "allItems", "allSortedItemsSet", "isNewItem", "applyHiddenState", "disable", "enable", "isUpdateLayout", "oldItems", "getItemByElement", "handleLayout", "parentNode", "REMOVED", "once", "find", "resetItems", "destroy", "unobserve", "includeMargins", "marginLeft", "marginRight", "marginTop", "marginBottom", "zero", "duration", "delay", "ALL", "__sorter", "__getColumnSpan", "__getAvailablePositions", "__getShortColumn", "__getCenteredPositions"]
}
